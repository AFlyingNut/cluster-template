crds:
  install: true
global:
  domain: "argocd.#{ bootstrap_cloudflare.domain }#"
configs:
  params:
    server.insecure: true
  cm:
    statusbadge.enabled: true
    helm.valuesFileSchemes: >-
      secrets+gpg-import, secrets+gpg-import-kubernetes,
      secrets+age-import, secrets+age-import-kubernetes,
      secrets, secrets+literal,
      https
    resource.exclusions: |
      - apiGroups:
          - cilium.io
        kinds:
          - CiliumIdentity
        clusters:
          - "*"
  secret:
    argocdServerAdminPassword: #{ bootstrap_argocd_admin_password }#
    githubSecret: #{ bootstrap_github_webhook_token }#
controller:
  metrics:
    enabled: true
    applicationLabels:
      enabled: true
    serviceMonitor: &service-monitor
      enabled: true
      additionalLabels:
        release: kube-prometheus-stack
dex:
  metrics:
    enabled: true
    serviceMonitor: *service-monitor
redis:
  metrics:
    enabled: true
    serviceMonitor: *service-monitor
server:
  allowAnyNamespace: true
  certificate:
    enabled: true
    secretName: argocd-server-tls
    domain:  "argocd.#{ bootstrap_cloudflare.domain }#"
    issuer:
      group: cert-manager.io
      kind: ClusterIssuer
      #% if bootstrap_cloudflare.acme.production %#
      name: letsencrypt-production
      #% else %#
      name: letsencrypt-staging
      #% endif %#
  ingress:
    enabled: true
    ingressClassName: external
    annotations:
      external-dns.alpha.kubernetes.io/target: "external.#{ bootstrap_cloudflare.domain }#"
    hostname: "argocd.#{ bootstrap_cloudflare.domain }#"
  metrics:
    enabled: true
    serviceMonitor: *service-monitor
notifications:
  metrics:
    enabled: true
    serviceMonitor: *service-monitor
repoServer:
  serviceAccount:
    create: true
    name: argocd-repo-server
  rbac:
    - apiGroups:
        - ""
      resources:
        - secrets
      verbs:
        - get
  env:
    - name: HELM_PLUGINS
      value: /gitops-tools/helm-plugins/
    - name: HELM_SECRETS_CURL_PATH
      value: /gitops-tools/curl
    - name: HELM_SECRETS_SOPS_PATH
      value: /gitops-tools/sops
    - name: HELM_SECRETS_VALS_PATH
      value: /gitops-tools/vals
    - name: HELM_SECRETS_KUBECTL_PATH
      value: /gitops-tools/kubectl
    - name: HELM_SECRETS_BACKEND
      value: sops
    # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
    - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
      value: "false"
    - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
      value: "true"
    - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
      value: "false"
    - name: HELM_SECRETS_WRAPPER_ENABLED
      value: "true"
    - name: HELM_SECRETS_DECRYPT_SECRETS_IN_TMP_DIR
      value: "true"
    - name: HELM_SECRETS_HELM_PATH
      value: /usr/local/bin/helm

    - name: HELM_SECRETS_LOAD_GPG_KEYS
      # Multiple keys can be separated by space
      value: /helm-secrets-private-keys/key.asc
  volumes:
    - name: gitops-tools
      emptyDir: {}
    # kubectl create secret generic helm-secrets-private-keys --from-file=key.asc=assets/gpg/private2.gpg
    - name: helm-secrets-private-keys
      secret:
        secretName: helm-secrets-private-keys
  volumeMounts:
    - mountPath: /gitops-tools
      name: gitops-tools
    - mountPath: /usr/local/sbin/helm
      subPath: helm
      name: gitops-tools
    - mountPath: /helm-secrets-private-keys/
      name: helm-secrets-private-keys
  initContainers:
    - name: gitops-tools
      image: ajaykumar4/gitops-tools
      imagePullPolicy: Always
      command: [sh, -ec]
      args:
        - |
          ls -lat gitops-tools
          chmod +x gitops-tools/*
      volumeMounts:
        - mountPath: /gitops-tools
          name: gitops-tools
